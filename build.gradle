import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id 'groovy'
    id 'java'
    id 'idea'
    id "org.springframework.boot" version "2.1.6.RELEASE"
    id "com.gradle.build-scan" version "2.2.1"
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
}

group 'com.cheroliv.fiber'
version '0.0.1'

bootJar {
    version = '0.0.1'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://repo.spring.io/milestone' }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

test {
    useJUnitPlatform {
        excludeEngines 'junit-vintage'
        includeEngines 'junit-jupiter'
    }
    exclude "**/*IT*", "**/*IntTest*", "**/*CucumberIT*"
}

dependencies {
    developmentOnly "org.springframework.boot:spring-boot-devtools:$spring_boot_version"
    testImplementation 'org.springframework:spring-context:5.1.8.RELEASE'
    implementation("org.codehaus.groovy:groovy-all:$groovy_version") {
        exclude group: "junit", module: "junit"
    }
    implementation("org.springframework.boot:spring-boot-starter:$spring_boot_version") {
        exclude module: "spring-boot-starter-tomcat"
        exclude group: "org.apache.tomcat.embed"
    }
    implementation("org.springframework.boot:spring-boot-starter-validation:$spring_boot_version") {
        exclude module: "spring-boot-starter-tomcat"
        exclude group: "org.apache.tomcat.embed"
    }
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version"
    implementation "commons-io:commons-io:$commons_io_version"

    implementation "com.jameskleeh:excel-builder:$excel_builder_version"
    implementation "org.apache.poi:poi:$poi_version"
    implementation "org.apache.poi:poi-ooxml:$poi_version"

    runtimeOnly "org.postgresql:postgresql:$postgresql_driver_version"

    testImplementation("org.springframework.boot:spring-boot-starter-test:$spring_boot_version") {
        exclude group: "junit", module: "junit"
    }
    testImplementation "com.xlson.groovycsv:groovycsv:$groovy_csv_version"
    testImplementation "com.h2database:h2:$h2database_version"
    testImplementation "com.google.guava:guava:${guava_version}"


    testCompileOnly "junit:junit:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit_jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
    testImplementation "org.junit.platform:junit-platform-commons:$junit_platform_version"
    testImplementation "org.junit.platform:junit-platform-launcher:$junit_platform_version"
    testImplementation "io.cucumber:cucumber-junit:$cucumber_version"
    testImplementation "io.cucumber:cucumber-spring:$cucumber_version"
}

task dependencyReportFile(type: DependencyReportTask) {
    String outputFileName = 'dependencies.txt'
    String separator = Paths.get(System.getProperty("user.home")).fileSystem.separator
    File depFile = new File("${rootProject.projectDir}${separator}${outputFileName}".toString())
    !(depFile.exists() && !depFile.directory) ?: depFile.delete()
    outputFile = file(outputFileName)
}

task cucumberTest(type: Test) {
    description = "Execute cucumber BDD tests."
    group = "verification"
    include "**/*CucumberIT*"
}

check.dependsOn cucumberTest

task cucumberTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn cucumberTest
}